import streamlit as st
import requests
import time

# --- URLs de l'API FastAPI
API_TRAIN_URL = "https://mlsleep-api.onrender.com/train"
API_PREDICT_URL = "https://mlsleep-api.onrender.com/predict"
API_STATUS_URL = "https://mlsleep-api.onrender.com/status"

# --- Mapping des classes pr√©dictives
label_map = {
    0: "Insomnie",
    1: "Apn√©e du sommeil",
    2: "Aucun trouble d√©tect√©"
}

# --- Initialiser l'√©tat du mod√®le
if "model_ready" not in st.session_state:
    st.session_state["model_ready"] = False

# --- Fonction pour v√©rifier l'√©tat du mod√®le
def check_model_status():
    try:
        r = requests.get(API_STATUS_URL, verify=False)
        if r.status_code == 200:
            status = r.json().get("status")
            st.session_state["model_ready"] = (status == "ready")
        else:
            st.session_state["model_ready"] = False
    except:
        st.session_state["model_ready"] = False

# --- Appel initial pour savoir si le mod√®le est pr√™t
check_model_status()

# --- Interface Streamlit
st.title("üí§ Pr√©diction des troubles du sommeil")

st.subheader("üìù Donn√©es utilisateur")

# Message d'avertissement si mod√®le non charg√©
if not st.session_state["model_ready"]:
    st.warning("‚ö†Ô∏è Le mod√®le n'est pas encore charg√©. Veuillez cliquer sur 'R√©entra√Æner le mod√®le' ci-dessous avant de pr√©dire.")

# Formulaire utilisateur
gender = st.selectbox("Genre", ["Male", "Female", "Other"])
age = st.slider("√Çge", 10, 100, 25)
occupation = st.selectbox("Profession", ["Student", "Employee", "Self-employed", "Unemployed", "Other"])
sleep_duration = st.slider("Dur√©e de sommeil (heures)", 0.0, 12.0, 7.0, step=0.5)
quality_of_sleep = st.slider("Qualit√© du sommeil (1 √† 10)", 1, 10, 6)
physical_activity_level = st.slider("Activit√© physique (1 √† 10)", 1, 10, 5)
stress_level = st.slider("Niveau de stress (1 √† 10)", 1, 10, 5)
bmi_category = st.selectbox("Cat√©gorie IMC", ["Normal", "Overweight", "Obese", "Underweight"])
blood_pressure = st.selectbox("Tension art√©rielle", ["Normal", "High", "Low"])
heart_rate = st.number_input("Fr√©quence cardiaque", 40, 150, 70)
daily_steps = st.number_input("Nombre de pas quotidiens", 0, 30000, 5000)
systolic = st.number_input("Tension systolique", 80, 200, 120)
diastolic = st.number_input("Tension diastolique", 40, 120, 80)

# --- Bouton de r√©entra√Ænement du mod√®le
if st.button("üîÅ R√©entra√Æner le mod√®le maintenant"):
    with st.spinner("Entra√Ænement en cours..."):
        try:
            r = requests.post(API_TRAIN_URL, verify=False)
            if r.status_code == 200:
                time.sleep(2)
                check_model_status()
                if st.session_state["model_ready"]:
                    st.success("‚úÖ Mod√®le r√©entra√Æn√© et pr√™t.")
                else:
                    st.warning("Mod√®le entra√Æn√© mais pas encore pr√™t.")
            else:
                st.error(f"Erreur : {r.status_code} - {r.text}")
        except Exception as e:
            st.error(f"Erreur lors de l‚Äôappel √† l‚ÄôAPI : {e}")

# --- Bouton de pr√©diction
if st.button("üîÆ Pr√©dire"):
    if not st.session_state["model_ready"]:
        st.error("‚õî Le mod√®le n'est pas pr√™t. Veuillez l'entra√Æner avant de pr√©dire.")
    else:
        data = {
            "Gender": gender,
            "Age": age,
            "Occupation": occupation,
            "Sleep_Duration": sleep_duration,
            "Quality_of_Sleep": quality_of_sleep,
            "Physical_Activity_Level": physical_activity_level,
            "Stress_Level": stress_level,
            "BMI_Category": bmi_category,
            "Blood_Pressure": blood_pressure,
            "Heart_Rate": heart_rate,
            "Daily_Steps": daily_steps,
            "Systolic": systolic,
            "Diastolic": diastolic
        }

        try:
            r = requests.post(API_PREDICT_URL, json=data, verify=False)
            if r.status_code == 200:
                prediction = r.json().get("prediction")
                label = label_map.get(prediction, "Inconnu")
                st.success(f"üí§ Trouble pr√©dit : {label}")
            else:
                st.error(f"Erreur {r.status_code} : {r.text}")
        except Exception as e:
            st.error(f"Erreur lors de la communication avec l‚ÄôAPI : {e}")
